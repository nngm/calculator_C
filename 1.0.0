// 버전 1.0.0
// 2018. 10. 15. 20:55
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

typedef struct token {
    int info;
    /*
     *  0. EOF   1. (     2. )     3. 값
     * 11. +    12. -    13. *    14. /    15. %    16. ^
     * 21. ln   22. log  23. sqrt 24. abs
     * 31. sin  32. cos  33. tan  34. asin 35. acos 36. atan 37. sinh 38. cosh 39. tanh
     */
    double value;
    struct token* prev;
    struct token* next;
} Token;

void calc(char*);
Token* tokenize(char*);   // 처음 토큰(EOF) 반환

int main()
{
    int key = 0;
    char formula[1000];

    system("TITLE 계산기");

    while (key != 3) {
        system("CLS");
        printf("1. 공학용 계산기\n2. 연산자 목록 및 사용법\n3. 종료\n : ");
        scanf("%d", &key);
        gets(formula);  // buffer flush

        if (key == 1) {
            while (1) {
                system("CLS");
                printf("1000자 이내로 입력 (뒤로가기 : Back) : ");
                do {
                    gets(formula);
                } while (!strlen(formula));
                if (!strcmp(strupr(formula), "BACK") || !strcmp(strupr(formula), "B"))
                    break;
                calc(formula);
            }
        }
        if (key == 2) {
            system("CLS");
            printf("\n");
            system("PAUSE");
        }
    }

    return 0;
}

void calc(char* formula)
{
    int i, numToken = 0;
    Token* cur;

    cur = tokenize(formula);

    while (1) {
        for (i = 0; cur->next->info != 0; i++, cur = cur->next);
        if (i == numToken) {
            printf("오류");
            system("PAUSE>NUL");
            return;
        }

        numToken = i;
        cur = cur->next->next;
        if (cur->info < 3) {        // EOF, (, )
            cur = cur->next;
        }
        else if (cur->info < 10) {  // 값
            if (cur->prev->info == 1 && cur->next->info == 2) {
                Token* temp = cur->prev->prev;
                free(cur->prev);
                cur->prev = temp;
                temp->next = cur;

                temp = cur->next->next;
                free(cur->next);
                cur->next = temp;
                temp->prev = cur;
            }
            else if (cur->prev->info == 0 && cur->next->info == 0) {
                printf("= %G\n", cur->value);
                free(cur->prev);
                free(cur->next);
                free(cur);
                break;
            }
            else
                cur = cur->next;
        }
        else if (cur->info == 13) { // *
            if (cur->prev->info == 2 || cur->next->info == 1) {
                cur = cur->next;
                continue;
            }
            Token* temp = cur->prev->prev;

            cur->info = 3;
            cur->value = cur->prev->value * cur->next->value;

            free(cur->prev);
            cur->prev = temp;
            temp->next = cur;

            temp = cur->next->next;
            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 14) { // /
            if (cur->prev->info == 2 || cur->next->info == 1) {
                cur = cur->next;
                continue;
            }
            Token* temp = cur->prev->prev;

            cur->info = 3;
            cur->value = cur->prev->value / cur->next->value;

            free(cur->prev);
            cur->prev = temp;
            temp->next = cur;

            temp = cur->next->next;
            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 11) { // +
            if (cur->prev->info == 2 || cur->prev->info > 12 || cur->next->info == 1 || cur->next->info > 12 ) {
                cur = cur->next;
                continue;
            }
            Token* temp = cur->prev->prev;

            cur->info = 3;
            cur->value = cur->prev->value + cur->next->value;

            free(cur->prev);
            cur->prev = temp;
            temp->next = cur;

            temp = cur->next->next;
            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 12) { // -
            if (cur->prev->info == 2 || cur->prev->info > 12 || cur->next->info == 1 || cur->next->info > 12 ) {
                cur = cur->next;
                continue;
            }
            Token* temp = cur->prev->prev;

            cur->info = 3;
            cur->value = cur->prev->value - cur->next->value;

            free(cur->prev);
            cur->prev = temp;
            temp->next = cur;

            temp = cur->next->next;
            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
    }

    system("PAUSE");

    return;
}

Token* tokenize(char* fmla)
{
    int i;
    Token* cur = (Token*) malloc(sizeof(Token*));
    Token* head = cur;
    cur->info = 0;

    for (i = 0; i < strlen(fmla); i++) {    // e, pi 추가할 것!
        if (fmla[i] == ' ')
            continue;

        Token* new = (Token*) malloc(sizeof(Token));

        if (fmla[i] >= '0' && fmla[i] <= '9' || cur->info != 3 && (fmla[i] == '+' || fmla[i] == '-')) {
            int j;
            char temp[100];
            for (j = 1; fmla[i + j] >= '0' && fmla[i + j] <= '9' || fmla[i + j] == '.'; j++);
            strcpy(temp, fmla + i);
            temp[j] = 0;
            new->info = 3;
            new->value = atof(temp);
            i += j - 1;
        }
        else {
            switch (fmla[i]) {
                case '(':   new->info = 1;  break;
                case ')':   new->info = 2;  break;
                case '+':   new->info = 11; break;
                case '-':   new->info = 12; break;
                case '*':   new->info = 13; break;
                case '/':   new->info = 14; break;
                default :
                    printf("ERROR : 알 수 없는 문자 %c\n", fmla[i]);
                    system("PAUSE");
                    exit(0);
            }
        }

        cur->next = new;
        new->prev = cur;
        cur = new;
    }
    Token* new = (Token*) malloc(sizeof(Token));
    new->info = 0;
    cur->next = new;
    new->prev = cur;
    head->prev = new;
    new->next = head;

    return head;
}
