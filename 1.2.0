// 1.2.0
// 2018. 10. 16. 22 : 30
// 추가된 점 : 단항 연산자를 추가했으나 토큰화 미완, 연산자 우선순위 조건 함수로 분리 및 버그 수정

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define CAL 1
#define MAN 2
#define QUIT 3

typedef struct token {
    int info;
    /*
     *  0. EOF   1. (     2. )     3. 값
     * 11. +    12. -    13. *    14. /    15. %    16. ^
     * 21. ln   22. log  23. sqrt 24. abs
     * 31. sin  32. cos  33. tan  34. asin 35. acos 36. atan 37. sinh 38. cosh 39. tanh
     */
    double value;
    struct token* prev;
    struct token* next;
} Token;

int addCondition(Token*);
int multiplCondition(Token*);
int unaryCondition(Token*);
void printToken(Token*);
char getOperator(int c) {
    switch (c) {
    case 1:
        return '(';
    case 2:
        return ')';
    case 11:
        return '+';
    case 12:
        return '-';
    case 13:
        return '*';
    case 14:
        return '/';
    case 15:
        return '%';
    case 16:
        return '^';
    case 21:
        return 'l';
    case 22:
        return 'L';
    case 23:
        return 'r';
    case 24:
        return 'a';
    case 31:
        return 's';
    case 32:
        return 'c';
    case 33:
        return 't';
    case 34:
        return 'S';
    case 35:
        return 'C';
    case 36:
        return 'T';
    case 37:
    case 38:
    case 39:
        return 'h';
    }
}
void manual(void);
void calc(char*);
Token* tokenize(char*);   // 처음 토큰(EOF) 반환

int main()
{
    int key = 0;
    char formula[1000], copy[1000];

    system("TITLE 계산기");

    while (key != QUIT) {
        system("CLS");
        printf("%d. 공학용 계산기\n", CAL);
        printf("%d. 연산자 목록 및 사용법\n", MAN);
        printf("%d. 종료\n", QUIT);

        printf(" : ");
        scanf("%d", &key);
        gets(formula);  // buffer flush

        if (key == CAL) {
            while (1) {
                system("CLS");
                printf("1000자 이내로 입력 (뒤로가기 : Back) : ");
                do {
                    gets(formula);
                } while (!strlen(formula));

                strncpy(copy, formula, 5);
                strupr(copy);

                if (!strcmp(copy, "BACK") || !strcmp(copy, "B"))
                    break;
                if (!strcmp(copy, "QUIT") || !strcmp(copy, "Q"))
                    exit(0);

                calc(formula);
            }
        }
        if (key == MAN)
            manual();
    }

    return 0;
}

int addCondition(Token* cur) {
    return cur->prev->info == 2 || cur->next->info == 1 || cur->prev->prev->info > 12 || cur->next->next->info > 12;
}
int multiplCondition(Token* cur) {
    return cur->prev->info == 2 || cur->next->info == 1 || cur->prev->prev->info > 15 || cur->next->next->info > 15;
}
int unaryCondition(Token* cur) {
    return cur->next->info == 1 || cur->next->next->info == 16;
}
void manual() {
    system("CLS");

    printf("  (   : 괄호의 열림을 나타냅니다.\n");
    printf("  )   : 괄호의 닫힘을 나타냅니다.\n");
    printf("  e   : 자연상수 e(2.718)를 나타냅니다.\n");
    printf("  pi  : 원주율 π(3.14)를 나타냅니다.\n");
    printf("  +   : 양의 부호 또는 덧셈 연산자를 나타냅니다.\n");
    printf("  -   : 음의 부호 또는 뺄셈 연산자를 나타냅니다.\n");
    printf("  *   : 곱셈 연산자를 나타냅니다.\n");
    printf("  /   : 나눗셈 연산자를 나타냅니다.\n");
    printf("  %   : 나머지 연산자를 나타냅니다.\n");
    printf("  ^   : 거듭제곱 연산자를 나타냅니다. 우선순위가 제일 높습니다.\n");
    printf("  ln  : 자연 로그를 나타냅니다.\n");
    printf("  log : 상용 로그를 나타냅니다.\n");
    printf(" sqrt : 제곱근을 나타냅니다.\n");
    printf(" root : 제곱근을 나타냅니다.\n");
    printf("  abs : 절댓값을 나타냅니다.\n");
    printf("  sin : 사인 함수를 나타냅니다.\n");
    printf("  cos : 코사인 함수를 나타냅니다.\n");
    printf("  tan : 탄젠트 함수를 나타냅니다.\n");
    printf(" asin : 아크 사인 함수를 나타냅니다.\n");
    printf(" acos : 아크 코사인 함수를 나타냅니다.\n");
    printf(" atan : 아크 탄젠트 함수를 나타냅니다.\n");
    printf(" sinh : 쌍곡사인(하이퍼볼릭 사인) 함수를 나타냅니다.\n");
    printf(" cosh : 쌍곡코사인(하이퍼볼릭 코사인) 함수를 나타냅니다.\n");
    printf(" tanh : 쌍곡탄젠트(하이퍼볼릭 탄젠트) 함수를 나타냅니다.\n");

    system("PAUSE");
    return;
}
void printToken(Token* cur) {
    for(cur = cur->next; cur->info != 0; cur = cur->next)
        if (cur->info == 3)
            printf("%G ", cur->value);
        else
            printf("%c ", getOperator(cur->info));

    printf("\n");

    return;
}
void calc(char* formula)
{
    Token* cur, *head;

    cur = tokenize(formula);
    head = cur;

    while (1) {/*
        printToken(head);
        printf("cur : ");
        if (cur->info == 3)
            printf("%G\n", cur->value);
        else
            printf("%c\n", getOperator(cur->info));*/
        if (cur->info < 3) {        // EOF, (, )
            cur = cur->next;
        }
        else if (cur->info <= 10) { // 값
            if (cur->prev->info == 1 && cur->next->info == 2) {
                Token* temp = cur->prev->prev;
                free(cur->prev);
                cur->prev = temp;
                temp->next = cur;

                temp = cur->next->next;
                free(cur->next);
                cur->next = temp;
                temp->prev = cur;
            }
            else if (cur->prev->info == 0 && cur->next->info == 0) {
                printf("= %G\n", cur->value);
                free(cur->prev);
                free(cur->next);
                free(cur);
                break;
            }
            else
                cur = cur->next;
        }
        else if (cur->info == 11) { // +
            if (addCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->prev->prev;

            cur->info = 3;
            cur->value = cur->prev->value + cur->next->value;

            free(cur->prev);
            cur->prev = temp;
            temp->next = cur;

            temp = cur->next->next;
            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 12) { // -
            if (addCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->prev->prev;

            cur->info = 3;
            cur->value = cur->prev->value - cur->next->value;

            free(cur->prev);
            cur->prev = temp;
            temp->next = cur;

            temp = cur->next->next;
            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 13) { // *
            if (multiplCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->prev->prev;

            cur->info = 3;
            cur->value = cur->prev->value * cur->next->value;

            free(cur->prev);
            cur->prev = temp;
            temp->next = cur;

            temp = cur->next->next;
            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 14) { // /
            if (multiplCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->prev->prev;

            cur->info = 3;
            cur->value = cur->prev->value / cur->next->value;

            free(cur->prev);
            cur->prev = temp;
            temp->next = cur;

            temp = cur->next->next;
            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 15) { // %
            if (multiplCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->prev->prev;

            cur->info = 3;
            cur->value = fmod(cur->prev->value, cur->next->value);

            free(cur->prev);
            cur->prev = temp;
            temp->next = cur;

            temp = cur->next->next;
            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 16) { // ^
            if (cur->prev->info == 2 || cur->next->info == 1 || cur->next->next->info == 16) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->prev->prev;

            cur->info = 3;
            cur->value = pow(cur->prev->value, cur->next->value);

            free(cur->prev);
            cur->prev = temp;
            temp->next = cur;

            temp = cur->next->next;
            free(cur->next);
            cur->next = temp;
            temp->prev = cur;

            cur = cur->prev;        // 연속된 거듭제곱 연산자일 경우 연산 방향이 우에서 좌
        }
        else if (cur->info == 21) { // ln
            if (unaryCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->next->next;

            cur->info = 3;
            cur->value = log(cur->next->value);

            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 22) { // log
            if (unaryCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->next->next;

            cur->info = 3;
            cur->value = log10(cur->next->value);

            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 23) { // sqrt
            if (unaryCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->next->next;

            cur->info = 3;
            cur->value = sqrt(cur->next->value);

            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 24) { // abs
            if (unaryCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->next->next;

            cur->info = 3;
            cur->value = abs(cur->next->value);

            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 31) { // sin
            if (unaryCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->next->next;

            cur->info = 3;
            cur->value = sin(cur->next->value);

            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 32) { // cos
            if (unaryCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->next->next;

            cur->info = 3;
            cur->value = cos(cur->next->value);

            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 33) { // tan
            if (unaryCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->next->next;

            cur->info = 3;
            cur->value = tan(cur->next->value);

            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 34) { // asin
            if (unaryCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->next->next;

            cur->info = 3;
            cur->value = asin(cur->next->value);

            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 35) { // acos
            if (unaryCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->next->next;

            cur->info = 3;
            cur->value = acos(cur->next->value);

            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 36) { // atan
            if (unaryCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->next->next;

            cur->info = 3;
            cur->value = atan(cur->next->value);

            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 37) { // sinh
            if (unaryCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->next->next;

            cur->info = 3;
            cur->value = sinh(cur->next->value);

            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 38) { // cosh
            if (unaryCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->next->next;

            cur->info = 3;
            cur->value = cosh(cur->next->value);

            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
        else if (cur->info == 39) { // tanh
            if (unaryCondition(cur)) {
                cur = cur->next;
                continue;
            }

            Token* temp = cur->next->next;

            cur->info = 3;
            cur->value = tanh(cur->next->value);

            free(cur->next);
            cur->next = temp;
            temp->prev = cur;
        }
    }


    system("PAUSE");

    return;
}

Token* tokenize(char* fmla)
{
    int i;
    Token* cur = (Token*) malloc(sizeof(Token*));
    Token* head = cur;
    cur->info = 0;

    for (i = 0; i < strlen(fmla); i++) {
        if (fmla[i] == ' ')
            continue;

        Token* new = (Token*) malloc(sizeof(Token));

        if (fmla[i] >= '0' && fmla[i] <= '9' || cur->info != 3 && (fmla[i] == '+' || fmla[i] == '-')) {
            int j;
            char temp[100];

            for (j = 1; fmla[i + j] >= '0' && fmla[i + j] <= '9' || fmla[i + j] == '.'; j++);

            strcpy(temp, fmla + i);
            temp[j] = 0;

            new->info = 3;
            new->value = atof(temp);
            i += j - 1;
        }
        else if (fmla[i] == 'e') {
            new->info = 3;
            new->value = 2.7182818284590452353602874713526624977572470937;
        }
        else if ((fmla[i] == 'P' || fmla[i] == 'p') && (fmla[i + 1] == 'I' || fmla[i + 1] == 'i')) {
            new->info = 3;
            new->value = 3.1415926535897932384626433832795028841971694;
            i++;
        }
        else {
            switch (fmla[i]) {
                case '(':   new->info = 1;  break;
                case ')':   new->info = 2;  break;
                case '+':   new->info = 11; break;
                case '-':   new->info = 12; break;
                case '*':   new->info = 13; break;
                case '/':   new->info = 14; break;
                case '%':   new->info = 15; break;
                case '^':   new->info = 16; break;
                default :
                    printf("ERROR : 알 수 없는 문자 %c\n", fmla[i]);
                    system("PAUSE");
                    exit(0);
            }
        }

        cur->next = new;
        new->prev = cur;
        cur = new;
    }
    Token* new = (Token*) malloc(sizeof(Token));
    new->info = 0;
    cur->next = new;
    new->prev = cur;
    head->prev = new;
    new->next = head;

    return head;
}
